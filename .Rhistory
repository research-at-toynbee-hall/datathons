#------------------------------------------
# Import Data
crime_data_ward <- read_csv(file = "datasets/datathon-2019-04-24/crime_in_london/raw/MPS Ward Level Crime (most recent 24 months).csv")
# Clean Metro Police Service Datasets
#-----------------------------------------------------
# This script cleans three separate raw data files.
# The first is the most recent 2 years the MPS has on file
# The second is Crime data with the new Warding (April 2010 Onwards)
# The third is Crime data with the old warding (2001--2010)
#-----------------------------------------------------
# This script will create Long clean data for these london sets
# Github has a strict 100MB limit on files
#-----------------------------------------------------
library(tidyverse)
library(lubridate)
library(reshape2) # Don't judge
#------------------------------------------
# Import Data
crime_data_ward <- read_csv(file = "datasets/datathon-2019-04-24/crime_in_london/raw/MPS Ward Level Crime (most recent 24 months).csv")
crime_long <- melt(crime_data_ward,
id.vars = c("MajorText",
"MinorText",
"WardName",
"WardCode",
"LookUp_BoroughName"))
# -------------------------------------------------
# Clean Names
crime_long <- crime_long %>%
rename(yearmonth = variable,
count = value)
# Clean Dates
crime_long <- crime_long %>%
mutate(year = substr(yearmonth, 1,4),
month = substr(yearmonth, 5,6),
year_month = as.character(paste0(year,"-",month)),
year_month = ymd(year_month, truncated = 1))
write_csv(x = crime_long, path = "datasets/datathon-2019-04-24/crime_in_london/cleaned/long_london_crime_2017-2019.csv")
#----------------------------------------------
# Example Script
#----------------------------------------------
# Load Libraries
library(tidyverse)
library(viridis)
crime_long <- read_csv("datasets/datathon-2019-04-24/crime_in_london/cleaned/long_london_crime_2017-2019.csv")
#----------------------------------------------
# Import Data
crime_long %>%
filter(LookUp_BoroughName == "Tower Hamlets") %>%
# filter(WardName == "Whitechapel" | WardName == "Weavers" |
#           WardName == "Spitalfields and Banglatown" |
#           WardName == "Bethnal Green" | WardName == "Mile End"|
#         WardName == "Limehouse") %>%
# filter(MajorText == "Theft" | MajorText == "Violence Against the Person" |
#           MajorText == "Sexual Offences" | MajorText == "Burglary" | MajorText == "Possession of Weapons") %>%
group_by(year_month, WardName, MajorText) %>%
summarise(count = sum(count)) %>%
mutate(zCount = scale(count)) %>%
ggplot(aes(x = year_month,
y = count,
color = MajorText,
group = MajorText)) +
geom_point(stat = 'identity') +
geom_line() +
theme_minimal() +
facet_wrap(~WardName) +
labs(title = "Select Crime Rates in Tower Hamlets, March 2017 -- February, 2019",
y = "Number of Recorded Crimes",
x = "Year and Month",
color = "Type of Crime",
subtitle = "Public Data obtained via data.london.gov.uk",
caption = "Source: https://data.london.gov.uk/dataset/recorded_crime_summary") +
scale_color_viridis(discrete = TRUE)
#----------------------------------------------
# Import Data
crime_long %>%
filter(LookUp_BoroughName == "Tower Hamlets") %>%
filter(WardName == "Whitechapel" | WardName == "Weavers" |
WardName == "Spitalfields and Banglatown" |
WardName == "Bethnal Green" | WardName == "Mile End"|
WardName == "Limehouse") %>%
filter(MajorText == "Theft" | MajorText == "Violence Against the Person" |
MajorText == "Sexual Offences" | MajorText == "Burglary" | MajorText == "Possession of Weapons") %>%
group_by(year_month, WardName, MajorText) %>%
summarise(count = sum(count)) %>%
mutate(zCount = scale(count)) %>%
ggplot(aes(x = year_month,
y = count,
color = MajorText,
group = MajorText)) +
geom_point(stat = 'identity') +
geom_line() +
theme_minimal() +
facet_wrap(~WardName) +
labs(title = "Select Crime Rates in Tower Hamlets, March 2017 -- February, 2019",
y = "Number of Recorded Crimes",
x = "Year and Month",
color = "Type of Crime",
subtitle = "Public Data obtained via data.london.gov.uk",
caption = "Source: https://data.london.gov.uk/dataset/recorded_crime_summary") +
scale_color_viridis(discrete = TRUE)
ggsave(filename = "Examples/Example_Plot.png",plot = example)
#----------------------------------------------
# Import Data
crime_long %>%
filter(LookUp_BoroughName == "Tower Hamlets") %>%
filter(WardName == "Whitechapel" | WardName == "Weavers" |
WardName == "Spitalfields and Banglatown" |
WardName == "Bethnal Green" | WardName == "Mile End"|
WardName == "Limehouse") %>%
filter(MajorText == "Theft" | MajorText == "Violence Against the Person" |
MajorText == "Sexual Offences" | MajorText == "Burglary" | MajorText == "Possession of Weapons") %>%
group_by(year_month, WardName, MajorText) %>%
summarise(count = sum(count)) %>%
mutate(zCount = scale(count)) %>%
ggplot(aes(x = year_month,
y = count,
color = MajorText,
group = MajorText)) +
geom_point(stat = 'identity') +
geom_line() +
theme_minimal() +
facet_wrap(~WardName) +
labs(title = "Select Crime Rates in Tower Hamlets, March 2017 -- February, 2019",
y = "Number of Recorded Crimes",
x = "Year and Month",
color = "Type of Crime",
subtitle = "Public Data obtained via data.london.gov.uk",
caption = "Source: https://data.london.gov.uk/dataset/recorded_crime_summary") +
scale_color_viridis(discrete = TRUE) -> example
example
ggsave(filename = "Examples/Example_Plot.png",plot = example)
#----------------------------------------------------------
# Clean Youth Homelessness
#----------------------------------------------------------
library(tidyverse)
youth_homeless <- read_csv("datasets/datathon-2019-04-24/youth_homelessness/raw/Copy of Databank_LAs_2012-13_2017-18.csv")
youth_homeless
youth_homeless %>%
select(year)
youth_homeless %>%
select(year) %>%
summarise(n = n())
youth_homeless %>%
select(year) %>%
group_by(year) %>%
summarise(n = n())
str_remove_all(string = youth_homeless$year,pattern = "\\/.*$")
youth_homeless$start_year <- str_remove_all(string = youth_homeless$year,pattern = "\\/.*$")
youth_homeless
write_csv(x = youth_homeless, path = "datasets/datathon-2019-04-24/youth_homelessness/clean/centrepoint_clean.csv")
time()
#----------------------------------------------
# Import Data
crime_long %>%
filter(LookUp_BoroughName == "Tower Hamlets") %>%
filter(WardName == "Whitechapel" | WardName == "Weavers" |
WardName == "Spitalfields and Banglatown" |
WardName == "Bethnal Green" | WardName == "Mile End"|
WardName == "Limehouse") %>%
filter(MajorText == "Theft" | MajorText == "Burglary") %>%
group_by(year_month, WardName, MajorText) %>%
summarise(count = sum(count)) %>%
mutate(zCount = scale(count)) %>%
ggplot(aes(x = year_month,
y = count,
color = MajorText,
group = MajorText)) +
geom_point(stat = 'identity') +
geom_line() +
crime_long <- read_csv("datasets/datathon-2019-04-24/crime_in_london/cleaned/long_london_crime_2017-2019.csv")
#----------------------------------------------
# Example Script
#----------------------------------------------
# Load Libraries
library(tidyverse)
library(viridis)
crime_long <- read_csv("datasets/datathon-2019-04-24/crime_in_london/cleaned/long_london_crime_2017-2019.csv")
#----------------------------------------------
# Import Data
crime_long %>%
filter(LookUp_BoroughName == "Tower Hamlets") %>%
filter(WardName == "Whitechapel" | WardName == "Weavers" |
WardName == "Spitalfields and Banglatown" |
WardName == "Bethnal Green" | WardName == "Mile End"|
WardName == "Limehouse") %>%
filter(MajorText == "Theft" | MajorText == "Burglary") %>%
group_by(year_month, WardName, MajorText) %>%
summarise(count = sum(count)) %>%
mutate(zCount = scale(count)) %>%
ggplot(aes(x = year_month,
y = count,
color = MajorText,
group = MajorText)) +
geom_point(stat = 'identity') +
geom_line() +
theme_minimal() +
facet_wrap(~WardName) +
labs(title = "Select Crime Rates in Tower Hamlets, March 2017 -- February, 2019",
y = "Number of Recorded Crimes",
x = "Year and Month",
color = "Type of Crime",
subtitle = "Public Data obtained via data.london.gov.uk",
caption = "Source: https://data.london.gov.uk/dataset/recorded_crime_summary") +
scale_color_viridis(discrete = TRUE) -> example
example
#----------------------------------------------
# Import Data
crime_long %>%
filter(LookUp_BoroughName == "Tower Hamlets") %>%
filter(WardName == "Whitechapel" | WardName == "Weavers" |
WardName == "Spitalfields and Banglatown" |
WardName == "Bethnal Green" | WardName == "Mile End"|
WardName == "Limehouse") %>%
filter(MajorText == "Theft" | MajorText == "Burglary") %>%
group_by(year_month, WardName, MajorText) %>%
summarise(count = sum(count)) %>%
mutate(zCount = scale(count)) %>%
ggplot(aes(x = year_month,
y = count,
color = MajorText,
group = MajorText)) +
geom_point(stat = 'identity') +
geom_line() +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
facet_wrap(~WardName) +
labs(title = "Select Crime Rates in Tower Hamlets, March 2017 -- February, 2019",
y = "Number of Recorded Crimes",
x = "Year and Month",
color = "Type of Crime",
subtitle = "Public Data obtained via data.london.gov.uk",
caption = "Source: https://data.london.gov.uk/dataset/recorded_crime_summary") +
scale_color_viridis(discrete = TRUE) -> example
example
#----------------------------------------------
# Import Data
crime_long %>%
filter(LookUp_BoroughName == "Tower Hamlets") %>%
filter(WardName == "Whitechapel" | WardName == "Weavers" |
WardName == "Spitalfields and Banglatown" |
WardName == "Bethnal Green" | WardName == "Mile End"|
WardName == "Limehouse") %>%
filter(MajorText == "Theft" | MajorText == "Burglary") %>%
group_by(year_month, WardName, MajorText) %>%
summarise(count = sum(count)) %>%
mutate(zCount = scale(count)) %>%
ggplot(aes(x = year_month,
y = count,
color = MajorText,
group = MajorText)) +
geom_point(stat = 'identity') +
geom_line() +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
facet_wrap(~WardName) +
labs(title = "Select Crime Rates in Tower Hamlets, March 2017 -- February, 2019",
y = "Number of Recorded Crimes",
x = "Year and Month",
color = "Type of Crime",
subtitle = "Public Data obtained via data.london.gov.uk",
caption = "Source: https://data.london.gov.uk/dataset/recorded_crime_summary") +
scale_color_viridis(discrete = TRUE,begin = .2,end = .8) -> example
example
ggsave(filename = "Examples/Example_Plot.png",plot = example)
#-------------------------------------------------
# Make Charts for Intro to Quant
#-------------------------------------------------
library(tidyverse)
rnorm(n = 100,mean = 50,sd = 2)
clear1 <- rnorm(n = 100,mean = 50,sd = 2)
clear2 <- rnorm(n = 100,mean = 52,sd = 1)
plot(clear1, clear2)
cor(clear1, clear2)
#==================================================
library(MASS) #package required for generating correlated random numbers
set.seed(1111) #set the seed of the random number generator
n=10000 #number of values to generate for the variable x
e1.sd <- 3 #the standard deviation of the error term in the relationship y~a+b*x+e1
e2.sd <- 10 #the standard deviation of the error term in the relationship z~c+d*y+e2
e.cor <- matrix(c(1,0.3,0.3,1),2) #the correlation matrix of the two error terms (i.e. in this example they are correlated at r=0.3)
e.cov <- e.cor*as.matrix(c(e1.sd,e2.sd))%*%t(as.matrix(c(e1.sd,e2.sd))) # the covariance matrix of the error terms
e <- mvrnorm(n,c(0,0),e.cov) #generate the error terms givin the defined correlation
e1 <- e[,1] #error term #1
e2 <- e[,2] #error term #2
x <- runif(n, min=0, max=20) #randomly generated x values
#the first model defining y~x
a <- 10
b <- 2
y <- a + b*x + e1
#the second model defining z~y
c <- 20
d <- 12
z <- c + d*y + e2
#implied relationship defining z~x
z.plus.e <- c + d*a + d*b*x + d*e1 + e2 #The two error terms are "d*e1" and "e2"
#relationship without error (i.e. the z-values that would be calulated with the linear models)
z.minus.e <- c + d*a + d*b*x
#Comparison of the derived z values as calculated by the models versus the actual z values
fit.z <- lm(z ~ z.minus.e - 1)
summary(fit.z)
plot(z ~ z.minus.e, pch=".", cex=4, col=rgb(0,0,1,0.2))
abline(0,1,col=rgb(0.5,0.5,0.5,0.5), lwd=10)
abline(fit.z,col=2, lwd=2)
e.cor
set.seed(1111) #set the seed of the random number generator
n=10000 #number of values to generate for the variable x
e1.sd <- 3 #the standard deviation of the error term in the relationship y~a+b*x+e1
e2.sd <- 10 #the standard deviation of the error term in the relationship z~c+d*y+e2
e.cor <- matrix(c(1,0.1,0.1,1),2) #the correlation matrix of the two error terms (i.e. in this example they are correlated at r=0.3)
e.cov <- e.cor*as.matrix(c(e1.sd,e2.sd))%*%t(as.matrix(c(e1.sd,e2.sd))) # the covariance matrix of the error terms
e <- mvrnorm(n,c(0,0),e.cov) #generate the error terms givin the defined correlation
e1 <- e[,1] #error term #1
x <- runif(n, min=0, max=20) #randomly generated x values
#the first model defining y~x
a <- 10
b <- 2
e2 <- e[,2] #error term #2
y <- a + b*x + e1
#the second model defining z~y
c <- 20
d <- 12
z <- c + d*y + e2
#implied relationship defining z~x
z.plus.e <- c + d*a + d*b*x + d*e1 + e2 #The two error terms are "d*e1" and "e2"
#relationship without error (i.e. the z-values that would be calulated with the linear models)
z.minus.e <- c + d*a + d*b*x
#Comparison of the derived z values as calculated by the models versus the actual z values
fit.z <- lm(z ~ z.minus.e - 1)
summary(fit.z)
plot(z ~ z.minus.e, pch=".", cex=4, col=rgb(0,0,1,0.2))
abline(0,1,col=rgb(0.5,0.5,0.5,0.5), lwd=10)
abline(fit.z,col=2, lwd=2)
set.seed(1111) #set the seed of the random number generator
n=10000 #number of values to generate for the variable x
e1.sd <- 3 #the standard deviation of the error term in the relationship y~a+b*x+e1
e2.sd <- 10 #the standard deviation of the error term in the relationship z~c+d*y+e2
e.cor <- matrix(c(1,0.01,0.01,1),2) #the correlation matrix of the two error terms (i.e. in this example they are correlated at r=0.3)
e.cov <- e.cor*as.matrix(c(e1.sd,e2.sd))%*%t(as.matrix(c(e1.sd,e2.sd))) # the covariance matrix of the error terms
e <- mvrnorm(n,c(0,0),e.cov) #generate the error terms givin the defined correlation
e2 <- e[,2] #error term #2
x <- runif(n, min=0, max=20) #randomly generated x values
e1 <- e[,1] #error term #1
#the first model defining y~x
a <- 10
b <- 2
y <- a + b*x + e1
#the second model defining z~y
c <- 20
d <- 12
z <- c + d*y + e2
#implied relationship defining z~x
z.plus.e <- c + d*a + d*b*x + d*e1 + e2 #The two error terms are "d*e1" and "e2"
#relationship without error (i.e. the z-values that would be calulated with the linear models)
z.minus.e <- c + d*a + d*b*x
#Comparison of the derived z values as calculated by the models versus the actual z values
fit.z <- lm(z ~ z.minus.e - 1)
summary(fit.z)
plot(z ~ z.minus.e, pch=".", cex=4, col=rgb(0,0,1,0.2))
plot(z ~ z.minus.e, pch=".", cex=4, col=rgb(0,0,1,0.2))
abline(0,1,col=rgb(0.5,0.5,0.5,0.5), lwd=10)
abline(fit.z,col=2, lwd=2)
out <- as.data.frame(mvrnorm(10, mu = c(0,0),
Sigma = matrix(c(1,0.56,0.56,1),, ncol = 2),
empirical = TRUE))
out$V1.s <- (out$V1 - min(out$V1))*1000+10
out$V2.s <- (out$V2 - min(out$V2))*200+30
plot(out$V1.s, out$V2.s)
out <- as.data.frame(mvrnorm(100, mu = c(0,0),
Sigma = matrix(c(1,0.56,0.56,1),, ncol = 2),
empirical = TRUE))
out$V1.s <- (out$V1 - min(out$V1))*1000+10
out$V2.s <- (out$V2 - min(out$V2))*200+30
plot(out$V1.s, out$V2.s)
n_sample <- 100
gen_cor <- 0.99
out <- as.data.frame(mvrnorm(n_sample, mu = c(0,0),
Sigma = matrix(c(1,gen_cor,gen_cor,1),, ncol = 2),
empirical = TRUE))
out$V1.s <- (out$V1 - min(out$V1))*1000+10
out$V2.s <- (out$V2 - min(out$V2))*200+30
plot(out$V1.s, out$V2.s)
ggplot(out, aes(x = V1.s, y = V2.s)) +
geom_point()
n_sample <- 100
gen_cor <- 0.05
out <- as.data.frame(mvrnorm(n_sample, mu = c(0,0),
Sigma = matrix(c(1,gen_cor,gen_cor,1),, ncol = 2),
empirical = TRUE))
out$V1.s <- (out$V1 - min(out$V1))*1000+10
out$V2.s <- (out$V2 - min(out$V2))*200+30
plot(out$V1.s, out$V2.s)
ggplot(out, aes(x = V1.s, y = V2.s)) +
geom_point() +
labs(title = "Variables Correlated at ",
x = "X Axis",
y = "Y Axis")
ggplot(out, aes(x = V1.s, y = V2.s)) +
geom_point() +
labs(title = "Variables Correlated at r = .05",
x = "X Axis",
y = "Y Axis")
n_sample <- 100
gen_cor <- 0.70
out <- as.data.frame(mvrnorm(n_sample, mu = c(0,0),
Sigma = matrix(c(1,gen_cor,gen_cor,1),, ncol = 2),
empirical = TRUE))
out$V1.s <- (out$V1 - min(out$V1))*1000+10
out$V2.s <- (out$V2 - min(out$V2))*200+30
plot(out$V1.s, out$V2.s)
ggplot(out, aes(x = V1.s, y = V2.s)) +
geom_point() +
labs(title = "Variables Correlated at r = .05",
x = "X Axis",
y = "Y Axis")
ggplot(out, aes(x = V1.s, y = V2.s)) +
geom_point() +
labs(title = "Variables Correlated at r = .70",
x = "X Axis",
y = "Y Axis")
rexp(1000, rate = 1)
plot(rexp(1000, rate = 1))
.5^4
1/(.5^4)
